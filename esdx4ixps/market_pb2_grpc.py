# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import market_pb2 as market__pb2


class MarketControllerStub(object):
    """TODO(juagargi) the data types used allow easy integration with the ones from Django.
    Despite this, we need to change them here to be more adequate. E.g. change
    Offer.bw_profile from a string to a repeated int32

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListOffers = channel.unary_stream(
                '/market.MarketController/ListOffers',
                request_serializer=market__pb2.ListRequest.SerializeToString,
                response_deserializer=market__pb2.Offer.FromString,
                )
        self.AddOffer = channel.unary_unary(
                '/market.MarketController/AddOffer',
                request_serializer=market__pb2.OfferSpecification.SerializeToString,
                response_deserializer=market__pb2.Offer.FromString,
                )
        self.Purchase = channel.unary_unary(
                '/market.MarketController/Purchase',
                request_serializer=market__pb2.PurchaseRequest.SerializeToString,
                response_deserializer=market__pb2.Contract.FromString,
                )
        self.PurchaseEquivalent = channel.unary_unary(
                '/market.MarketController/PurchaseEquivalent',
                request_serializer=market__pb2.PurchaseRequest.SerializeToString,
                response_deserializer=market__pb2.Contract.FromString,
                )
        self.GetContract = channel.unary_unary(
                '/market.MarketController/GetContract',
                request_serializer=market__pb2.GetContractRequest.SerializeToString,
                response_deserializer=market__pb2.Contract.FromString,
                )


class MarketControllerServicer(object):
    """TODO(juagargi) the data types used allow easy integration with the ones from Django.
    Despite this, we need to change them here to be more adequate. E.g. change
    Offer.bw_profile from a string to a repeated int32

    """

    def ListOffers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddOffer(self, request, context):
        """TODO(juagargi) this should open a channel where the provider would get contracts
        everytime a new client buys something
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Purchase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PurchaseEquivalent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetContract(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarketControllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListOffers': grpc.unary_stream_rpc_method_handler(
                    servicer.ListOffers,
                    request_deserializer=market__pb2.ListRequest.FromString,
                    response_serializer=market__pb2.Offer.SerializeToString,
            ),
            'AddOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOffer,
                    request_deserializer=market__pb2.OfferSpecification.FromString,
                    response_serializer=market__pb2.Offer.SerializeToString,
            ),
            'Purchase': grpc.unary_unary_rpc_method_handler(
                    servicer.Purchase,
                    request_deserializer=market__pb2.PurchaseRequest.FromString,
                    response_serializer=market__pb2.Contract.SerializeToString,
            ),
            'PurchaseEquivalent': grpc.unary_unary_rpc_method_handler(
                    servicer.PurchaseEquivalent,
                    request_deserializer=market__pb2.PurchaseRequest.FromString,
                    response_serializer=market__pb2.Contract.SerializeToString,
            ),
            'GetContract': grpc.unary_unary_rpc_method_handler(
                    servicer.GetContract,
                    request_deserializer=market__pb2.GetContractRequest.FromString,
                    response_serializer=market__pb2.Contract.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'market.MarketController', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MarketController(object):
    """TODO(juagargi) the data types used allow easy integration with the ones from Django.
    Despite this, we need to change them here to be more adequate. E.g. change
    Offer.bw_profile from a string to a repeated int32

    """

    @staticmethod
    def ListOffers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/market.MarketController/ListOffers',
            market__pb2.ListRequest.SerializeToString,
            market__pb2.Offer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.MarketController/AddOffer',
            market__pb2.OfferSpecification.SerializeToString,
            market__pb2.Offer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Purchase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.MarketController/Purchase',
            market__pb2.PurchaseRequest.SerializeToString,
            market__pb2.Contract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PurchaseEquivalent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.MarketController/PurchaseEquivalent',
            market__pb2.PurchaseRequest.SerializeToString,
            market__pb2.Contract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/market.MarketController/GetContract',
            market__pb2.GetContractRequest.SerializeToString,
            market__pb2.Contract.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
