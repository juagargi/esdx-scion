// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: market.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketControllerClient is the client API for MarketController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketControllerClient interface {
	ListOffers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (MarketController_ListOffersClient, error)
	// TODO(juagargi) this should open a channel where the provider would get contracts
	// everytime a new client buys something
	AddOffer(ctx context.Context, in *OfferSpecification, opts ...grpc.CallOption) (*Offer, error)
	Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Contract, error)
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error)
}

type marketControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketControllerClient(cc grpc.ClientConnInterface) MarketControllerClient {
	return &marketControllerClient{cc}
}

func (c *marketControllerClient) ListOffers(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (MarketController_ListOffersClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketController_ServiceDesc.Streams[0], "/market.MarketController/ListOffers", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketControllerListOffersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketController_ListOffersClient interface {
	Recv() (*Offer, error)
	grpc.ClientStream
}

type marketControllerListOffersClient struct {
	grpc.ClientStream
}

func (x *marketControllerListOffersClient) Recv() (*Offer, error) {
	m := new(Offer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketControllerClient) AddOffer(ctx context.Context, in *OfferSpecification, opts ...grpc.CallOption) (*Offer, error) {
	out := new(Offer)
	err := c.cc.Invoke(ctx, "/market.MarketController/AddOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketControllerClient) Purchase(ctx context.Context, in *PurchaseRequest, opts ...grpc.CallOption) (*Contract, error) {
	out := new(Contract)
	err := c.cc.Invoke(ctx, "/market.MarketController/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketControllerClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error) {
	out := new(Contract)
	err := c.cc.Invoke(ctx, "/market.MarketController/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketControllerServer is the server API for MarketController service.
// All implementations must embed UnimplementedMarketControllerServer
// for forward compatibility
type MarketControllerServer interface {
	ListOffers(*ListRequest, MarketController_ListOffersServer) error
	// TODO(juagargi) this should open a channel where the provider would get contracts
	// everytime a new client buys something
	AddOffer(context.Context, *OfferSpecification) (*Offer, error)
	Purchase(context.Context, *PurchaseRequest) (*Contract, error)
	GetContract(context.Context, *GetContractRequest) (*Contract, error)
	mustEmbedUnimplementedMarketControllerServer()
}

// UnimplementedMarketControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMarketControllerServer struct {
}

func (UnimplementedMarketControllerServer) ListOffers(*ListRequest, MarketController_ListOffersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListOffers not implemented")
}
func (UnimplementedMarketControllerServer) AddOffer(context.Context, *OfferSpecification) (*Offer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOffer not implemented")
}
func (UnimplementedMarketControllerServer) Purchase(context.Context, *PurchaseRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (UnimplementedMarketControllerServer) GetContract(context.Context, *GetContractRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedMarketControllerServer) mustEmbedUnimplementedMarketControllerServer() {}

// UnsafeMarketControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketControllerServer will
// result in compilation errors.
type UnsafeMarketControllerServer interface {
	mustEmbedUnimplementedMarketControllerServer()
}

func RegisterMarketControllerServer(s grpc.ServiceRegistrar, srv MarketControllerServer) {
	s.RegisterService(&MarketController_ServiceDesc, srv)
}

func _MarketController_ListOffers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketControllerServer).ListOffers(m, &marketControllerListOffersServer{stream})
}

type MarketController_ListOffersServer interface {
	Send(*Offer) error
	grpc.ServerStream
}

type marketControllerListOffersServer struct {
	grpc.ServerStream
}

func (x *marketControllerListOffersServer) Send(m *Offer) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketController_AddOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferSpecification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketControllerServer).AddOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketController/AddOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketControllerServer).AddOffer(ctx, req.(*OfferSpecification))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketController_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketControllerServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketController/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketControllerServer).Purchase(ctx, req.(*PurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketController_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketControllerServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketController/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketControllerServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketController_ServiceDesc is the grpc.ServiceDesc for MarketController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.MarketController",
	HandlerType: (*MarketControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOffer",
			Handler:    _MarketController_AddOffer_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _MarketController_Purchase_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _MarketController_GetContract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListOffers",
			Handler:       _MarketController_ListOffers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "market.proto",
}
