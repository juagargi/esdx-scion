// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: market.proto

package market

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{0}
}

// Immutable values an offer has. These are constant throughout the life of the offer.
type OfferSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iaid              string               `protobuf:"bytes,1,opt,name=iaid,proto3" json:"iaid,omitempty"`
	Notbefore         *timestamp.Timestamp `protobuf:"bytes,3,opt,name=notbefore,proto3" json:"notbefore,omitempty"`
	Notafter          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=notafter,proto3" json:"notafter,omitempty"`
	ReachablePaths    string               `protobuf:"bytes,5,opt,name=reachable_paths,json=reachablePaths,proto3" json:"reachable_paths,omitempty"`
	QosClass          int32                `protobuf:"varint,6,opt,name=qos_class,json=qosClass,proto3" json:"qos_class,omitempty"`
	PricePerUnit      float64              `protobuf:"fixed64,7,opt,name=price_per_unit,json=pricePerUnit,proto3" json:"price_per_unit,omitempty"` // price of 600 * 1 Megabits (BW_PERIOD * BW_STEP)
	BwProfile         string               `protobuf:"bytes,8,opt,name=bw_profile,json=bwProfile,proto3" json:"bw_profile,omitempty"`
	BrAddressTemplate string               `protobuf:"bytes,9,opt,name=br_address_template,json=brAddressTemplate,proto3" json:"br_address_template,omitempty"` // e.g. 1.1.1.1:50-100 (use 1.1.1.1, ports from 50 to 100)
	BrMtu             int32                `protobuf:"varint,10,opt,name=br_mtu,json=brMtu,proto3" json:"br_mtu,omitempty"`                                     // the mtu to use in the link
	BrLinkTo          string               `protobuf:"bytes,11,opt,name=br_link_to,json=brLinkTo,proto3" json:"br_link_to,omitempty"`                           // the type of link: PARENT, CORE or PEER
	Signature         []byte               `protobuf:"bytes,50,opt,name=signature,proto3" json:"signature,omitempty"`                                           // the signature checks all the previous fields
}

func (x *OfferSpecification) Reset() {
	*x = OfferSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferSpecification) ProtoMessage() {}

func (x *OfferSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferSpecification.ProtoReflect.Descriptor instead.
func (*OfferSpecification) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{1}
}

func (x *OfferSpecification) GetIaid() string {
	if x != nil {
		return x.Iaid
	}
	return ""
}

func (x *OfferSpecification) GetNotbefore() *timestamp.Timestamp {
	if x != nil {
		return x.Notbefore
	}
	return nil
}

func (x *OfferSpecification) GetNotafter() *timestamp.Timestamp {
	if x != nil {
		return x.Notafter
	}
	return nil
}

func (x *OfferSpecification) GetReachablePaths() string {
	if x != nil {
		return x.ReachablePaths
	}
	return ""
}

func (x *OfferSpecification) GetQosClass() int32 {
	if x != nil {
		return x.QosClass
	}
	return 0
}

func (x *OfferSpecification) GetPricePerUnit() float64 {
	if x != nil {
		return x.PricePerUnit
	}
	return 0
}

func (x *OfferSpecification) GetBwProfile() string {
	if x != nil {
		return x.BwProfile
	}
	return ""
}

func (x *OfferSpecification) GetBrAddressTemplate() string {
	if x != nil {
		return x.BrAddressTemplate
	}
	return ""
}

func (x *OfferSpecification) GetBrMtu() int32 {
	if x != nil {
		return x.BrMtu
	}
	return 0
}

func (x *OfferSpecification) GetBrLinkTo() string {
	if x != nil {
		return x.BrLinkTo
	}
	return ""
}

func (x *OfferSpecification) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Offer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // the ID of this offer
	Specs *OfferSpecification `protobuf:"bytes,2,opt,name=specs,proto3" json:"specs,omitempty"`
}

func (x *Offer) Reset() {
	*x = Offer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{2}
}

func (x *Offer) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Offer) GetSpecs() *OfferSpecification {
	if x != nil {
		return x.Specs
	}
	return nil
}

type PurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// information about the offer:
	Offer *Offer `protobuf:"bytes,1,opt,name=offer,proto3" json:"offer,omitempty"`
	// buyer information:
	BuyerIaid  string               `protobuf:"bytes,11,opt,name=buyer_iaid,json=buyerIaid,proto3" json:"buyer_iaid,omitempty"` // ISD-AS ID of the buyer
	BwProfile  string               `protobuf:"bytes,12,opt,name=bw_profile,json=bwProfile,proto3" json:"bw_profile,omitempty"`
	StartingOn *timestamp.Timestamp `protobuf:"bytes,13,opt,name=starting_on,json=startingOn,proto3" json:"starting_on,omitempty"`
	Signature  []byte               `protobuf:"bytes,14,opt,name=signature,proto3" json:"signature,omitempty"` // over all fields except offer_id
}

func (x *PurchaseRequest) Reset() {
	*x = PurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurchaseRequest) ProtoMessage() {}

func (x *PurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurchaseRequest.ProtoReflect.Descriptor instead.
func (*PurchaseRequest) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{3}
}

func (x *PurchaseRequest) GetOffer() *Offer {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *PurchaseRequest) GetBuyerIaid() string {
	if x != nil {
		return x.BuyerIaid
	}
	return ""
}

func (x *PurchaseRequest) GetBwProfile() string {
	if x != nil {
		return x.BwProfile
	}
	return ""
}

func (x *PurchaseRequest) GetStartingOn() *timestamp.Timestamp {
	if x != nil {
		return x.StartingOn
	}
	return nil
}

func (x *PurchaseRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId        int64                `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractTimestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=contract_timestamp,json=contractTimestamp,proto3" json:"contract_timestamp,omitempty"`
	// the signature from the broker (IXP) covers all fields
	ContractSignature []byte `protobuf:"bytes,3,opt,name=contract_signature,json=contractSignature,proto3" json:"contract_signature,omitempty"`
	// details about the offer:
	Offer     *OfferSpecification `protobuf:"bytes,10,opt,name=offer,proto3" json:"offer,omitempty"`
	BrAddress string              `protobuf:"bytes,11,opt,name=br_address,json=brAddress,proto3" json:"br_address,omitempty"`
	// details about the buyer
	BuyerIaid       string               `protobuf:"bytes,50,opt,name=buyer_iaid,json=buyerIaid,proto3" json:"buyer_iaid,omitempty"`
	BuyerStartingOn *timestamp.Timestamp `protobuf:"bytes,51,opt,name=buyer_starting_on,json=buyerStartingOn,proto3" json:"buyer_starting_on,omitempty"`
	BuyerBwProfile  string               `protobuf:"bytes,52,opt,name=buyer_bw_profile,json=buyerBwProfile,proto3" json:"buyer_bw_profile,omitempty"`
	BuyerSignature  []byte               `protobuf:"bytes,53,opt,name=buyer_signature,json=buyerSignature,proto3" json:"buyer_signature,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{4}
}

func (x *Contract) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Contract) GetContractTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.ContractTimestamp
	}
	return nil
}

func (x *Contract) GetContractSignature() []byte {
	if x != nil {
		return x.ContractSignature
	}
	return nil
}

func (x *Contract) GetOffer() *OfferSpecification {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *Contract) GetBrAddress() string {
	if x != nil {
		return x.BrAddress
	}
	return ""
}

func (x *Contract) GetBuyerIaid() string {
	if x != nil {
		return x.BuyerIaid
	}
	return ""
}

func (x *Contract) GetBuyerStartingOn() *timestamp.Timestamp {
	if x != nil {
		return x.BuyerStartingOn
	}
	return nil
}

func (x *Contract) GetBuyerBwProfile() string {
	if x != nil {
		return x.BuyerBwProfile
	}
	return ""
}

func (x *Contract) GetBuyerSignature() []byte {
	if x != nil {
		return x.BuyerSignature
	}
	return nil
}

type GetContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId         int64  `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	RequesterIaid      string `protobuf:"bytes,2,opt,name=requester_iaid,json=requesterIaid,proto3" json:"requester_iaid,omitempty"`
	RequesterSignature []byte `protobuf:"bytes,3,opt,name=requester_signature,json=requesterSignature,proto3" json:"requester_signature,omitempty"`
}

func (x *GetContractRequest) Reset() {
	*x = GetContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContractRequest) ProtoMessage() {}

func (x *GetContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContractRequest.ProtoReflect.Descriptor instead.
func (*GetContractRequest) Descriptor() ([]byte, []int) {
	return file_market_proto_rawDescGZIP(), []int{5}
}

func (x *GetContractRequest) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *GetContractRequest) GetRequesterIaid() string {
	if x != nil {
		return x.RequesterIaid
	}
	return ""
}

func (x *GetContractRequest) GetRequesterSignature() []byte {
	if x != nil {
		return x.RequesterSignature
	}
	return nil
}

var File_market_proto protoreflect.FileDescriptor

var file_market_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa8, 0x03, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x61, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x6e, 0x6f, 0x74, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x71, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x62, 0x72, 0x5f, 0x6d, 0x74, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x62, 0x72, 0x4d, 0x74, 0x75, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x49, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x0f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x23, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x05,
	0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x69,
	0x61, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x49, 0x61, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x77, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb0,
	0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x61, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x49, 0x61, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x62, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x65, 0x72, 0x42,
	0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x61, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x61, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x32, 0xbc, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x13, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x22, 0x00, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08,
	0x41, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x12, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00,
	0x42, 0x13, 0x5a, 0x11, 0x65, 0x73, 0x64, 0x78, 0x5f, 0x73, 0x63, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_proto_rawDescOnce sync.Once
	file_market_proto_rawDescData = file_market_proto_rawDesc
)

func file_market_proto_rawDescGZIP() []byte {
	file_market_proto_rawDescOnce.Do(func() {
		file_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_proto_rawDescData)
	})
	return file_market_proto_rawDescData
}

var file_market_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_market_proto_goTypes = []interface{}{
	(*ListRequest)(nil),         // 0: market.ListRequest
	(*OfferSpecification)(nil),  // 1: market.OfferSpecification
	(*Offer)(nil),               // 2: market.Offer
	(*PurchaseRequest)(nil),     // 3: market.PurchaseRequest
	(*Contract)(nil),            // 4: market.Contract
	(*GetContractRequest)(nil),  // 5: market.GetContractRequest
	(*timestamp.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_market_proto_depIdxs = []int32{
	6,  // 0: market.OfferSpecification.notbefore:type_name -> google.protobuf.Timestamp
	6,  // 1: market.OfferSpecification.notafter:type_name -> google.protobuf.Timestamp
	1,  // 2: market.Offer.specs:type_name -> market.OfferSpecification
	2,  // 3: market.PurchaseRequest.offer:type_name -> market.Offer
	6,  // 4: market.PurchaseRequest.starting_on:type_name -> google.protobuf.Timestamp
	6,  // 5: market.Contract.contract_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: market.Contract.offer:type_name -> market.OfferSpecification
	6,  // 7: market.Contract.buyer_starting_on:type_name -> google.protobuf.Timestamp
	0,  // 8: market.MarketController.ListOffers:input_type -> market.ListRequest
	1,  // 9: market.MarketController.AddOffer:input_type -> market.OfferSpecification
	3,  // 10: market.MarketController.Purchase:input_type -> market.PurchaseRequest
	3,  // 11: market.MarketController.PurchaseEquivalent:input_type -> market.PurchaseRequest
	5,  // 12: market.MarketController.GetContract:input_type -> market.GetContractRequest
	2,  // 13: market.MarketController.ListOffers:output_type -> market.Offer
	2,  // 14: market.MarketController.AddOffer:output_type -> market.Offer
	4,  // 15: market.MarketController.Purchase:output_type -> market.Contract
	4,  // 16: market.MarketController.PurchaseEquivalent:output_type -> market.Contract
	4,  // 17: market.MarketController.GetContract:output_type -> market.Contract
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_market_proto_init() }
func file_market_proto_init() {
	if File_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Offer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_market_proto_goTypes,
		DependencyIndexes: file_market_proto_depIdxs,
		MessageInfos:      file_market_proto_msgTypes,
	}.Build()
	File_market_proto = out.File
	file_market_proto_rawDesc = nil
	file_market_proto_goTypes = nil
	file_market_proto_depIdxs = nil
}
